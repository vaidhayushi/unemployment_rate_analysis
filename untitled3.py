# -*- coding: utf-8 -*-
"""Untitled3.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/14Nph9dWvz182TfQQ7YED3df-o3Ik-rzz
"""

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
import plotly.express as px
data = pd.read_csv('https://raw.githubusercontent.com/amankharwal/Website-data/master/unemployment.csv')  # read file
data
plt.style.use('seaborn-whitegrid')
plt.figure(figsize=(5, 5))
sns.heatmap(data.corr())
plt.show()

data.columns= ["States","Date","Frequency",
               "Estimated Unemployment Rate","Estimated Employed",
               "Estimated Labour Participation Rate","Region",
               "longitude","latitude"]
data.info()

print(data.isnull().sum())

data.info()
data.head()

plt.figure(figsize=(12, 10))
plt.title("Indian Unemployment")
sns.countplot(x="Date", hue="Region", data=data)
plt.show()

plt.title("Indian Unemployment")
sns.histplot(x="Estimated Employed", hue="Region", data=data)
plt.show()

import plotly.express as px
unemploment = data[["States", "Region", "Estimated Unemployment Rate"]]
figure = px.sunburst(unemploment, path=["Region", "States"],
                     values="Estimated Unemployment Rate",
                     width=700, height=700, color_continuous_scale="RdY1Gn",
                     title="Unemployment Rate in India")
figure.show()

fig = px.box(data,x='States',y='Estimated Unemployment Rate',color='States',title='Unemployment rate',template='plotly')
fig.update_layout(xaxis={'categoryorder':'total descending'})
fig.show()

fig = px.scatter_matrix(data,template='plotly',
    dimensions=['Estimated Unemployment Rate','Estimated Employed',
                'Estimated Labour Participation Rate'],
    color='Region')
fig.show()

plot_ump = data[['Estimated Unemployment Rate','States']]

data_unemp = plot_ump.groupby('States').mean().reset_index()

data_unemp = data_unemp.sort_values('Estimated Unemployment Rate')

fig = px.bar(data_unemp, x='States',y='Estimated Unemployment Rate',color='States',
            title='Average Unemployment Rate in each state',template='plotly')

fig.show()

fig = px.bar(data, x='Region',y='Estimated Unemployment Rate',animation_frame = 'Date',color='States',
            title='Unemployment rate across region from Jan.2020 to Oct.2020', height=700,template='plotly')

fig.update_layout(xaxis={'categoryorder':'total descending'})

fig.layout.updatemenus[0].buttons[0].args[1]["frame"]["duration"] = 2000

fig.show()

data.describe().T.style.background_gradient(cmap = "viridis")



from sklearn.model_selection import train_test_split
from sklearn.linear_model import LinearRegression
from sklearn.metrics import mean_squared_error, r2_score

X = data[['Estimated Employed', 'Estimated Labour Participation Rate']]
y = data['Estimated Unemployment Rate']
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=0)
model = LinearRegression()
model.fit(X_train, y_train)

y_pred = model.predict(X_test)

mse = mean_squared_error(y_test, y_pred)
r2 = r2_score(y_test, y_pred)

print(f'Mean Squared Error: {mse}')
print(f'R-squared (R²) Score: {r2}')

from sklearn.ensemble import RandomForestRegressor
random_forest_model = RandomForestRegressor(n_estimators=100, random_state=0)
random_forest_model.fit(X_train, y_train)
random_forest_predictions = random_forest_model.predict(X_test)
random_forest_mse = mean_squared_error(y_test, random_forest_predictions)
random_forest_r2 = r2_score(y_test, random_forest_predictions)
print(f'Random Forest Regression - Mean Squared Error: {random_forest_mse}, R-squared (R²) Score: {random_forest_r2}')

from sklearn.model_selection import train_test_split
from sklearn.ensemble import RandomForestRegressor
from sklearn.preprocessing import OneHotEncoder, StandardScaler, PolynomialFeatures
from sklearn.compose import ColumnTransformer
from sklearn.metrics import mean_squared_error, r2_score

categorical_features = ['States', 'Region']
numeric_features = [
    'Estimated Employed',
    'Estimated Labour Participation Rate',
    'longitude',
    'latitude'
]
preprocessor = ColumnTransformer(
    transformers=[
        ('num', StandardScaler(), numeric_features),
        ('cat', OneHotEncoder(), categorical_features)
    ])

X = data[numeric_features + categorical_features]
y = data['Estimated Unemployment Rate']
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=0)
X_train = preprocessor.fit_transform(X_train)
X_test = preprocessor.transform(X_test)

random_forest_model = RandomForestRegressor(n_estimators=100, random_state=0)
random_forest_model.fit(X_train, y_train)


random_forest_mse = mean_squared_error(y_test, random_forest_predictions)
random_forest_r2 = r2_score(y_test, random_forest_predictions)

print(f'Random Forest Regression - Mean Squared Error: {random_forest_mse}, R-squared (R²) Score: {random_forest_r2}')

